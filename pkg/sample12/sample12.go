package main

import "fmt"

//
// 関数 simRatio に与える s1 と s2 及び、その戻り値の例を以下に示す
//
// | s1                         | s2                         | 戻り値  |
// |----------------------------|----------------------------|--------|
// | {"a", "p", "p", "l", "e"}  | {"a", "p", "p", "l", "e"}  | 1      |
// | {"a", "p", "p", "l", "e"}  | {"a", "p", "r", "i", "l"}  | 0.4    |
// | {"a", "p", "p", "l", "e"}  | {"m", "e", "l", "o", "n"}  | 0      |
// | {"a", "p", "p", "l", "e"}  | {"p", "e", "n"}            | -1     |
//

// 引数として与えられた要素数 1q の文字列配列 s1 と s2 を比較し、要素数が等しい場合は、配列の並びがどの程度一致しているかを返す
func simRatio(s1 []string, s2 []string) float64 {
	if len(s1) != len(s2) {
		return -1
	}
	cnt := 0
	// 配列の要素を比較し、一致している要素数をカウントする
	for i := 0; i < len(s1); i++ {
		// 要素が一致している場合は、カウントをインクリメントする
		if s1[i] == s2[i] {
			cnt++
		}
	}
	// 一致している要素数を、配列の要素数で割り、一致率を求める
	return float64(cnt) / float64(len(s1))
}

func main() {
	s1 := []string{"a", "p", "p", "l", "e"}
	s2 := []string{"a", "p", "p", "l", "e"}
	fmt.Println(simRatio(s1, s2))
}
