package main

import (
	"fmt"
	"log"
)

// 8ビット型の引数 byte を受け取り、ビットの並びを逆にした値を返す
func rev(b byte) byte {
	var r byte = 0          // 00000000 で初期化
	for i := 0; i < 8; i++ {
		r = r << 1      // r を左に1ビットシフトして、次のビットを追加するスペースを作成
		r = r | (b & 1) // b & 1 は b の最下位ビットを取り出し、r の最下位ビットに追加
		b = b >> 1      // b を右に1ビットシフトして、次のビットを追加するスペースを作成

		// ループの各ステップでの r と b の値を出力
		log.Printf("Loop%d: r=%08b, b=%08b\n", i, r, b)
		// Loop0: r=00000001, b=00100101
		// Loop1: r=00000011, b=00010010
		// Loop2: r=00000110, b=00001001
		// Loop3: r=00001101, b=00000100
		// Loop4: r=00011010, b=00000010
		// Loop5: r=00110100, b=00000001
		// Loop6: r=01101001, b=00000000
		// Loop7: r=11010010, b=00000000
	}
	return r
}

func main() {
	// 0b01001011（ビット表記で01001011）を渡すと、11010010（ビット表記で11010010）が返る
	fmt.Printf("%08b\n", rev(0b01001011))
}
